import React, { useState, useRef } from "react";
import { DataGrid } from "@mui/x-data-grid";
import { Button } from "@mui/material";
import * as XLSX from "xlsx";

const ExcelEditor = () => {
  const [rows, setRows] = useState([]);
  const [columns, setColumns] = useState([]);
  const [fileName, setFileName] = useState("");
  const fileInputRef = useRef(null);

  const handleFileUpload = (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    setFileName(file.name);

    const reader = new FileReader();
    reader.onload = (evt) => {
      const buf = evt.target.result;
      const wb = XLSX.read(buf, { type: "array" });
      const wsname = wb.SheetNames[0];
      const ws = wb.Sheets[wsname];
      const jsonData = XLSX.utils.sheet_to_json(ws, { header: 1, defval: "" });

      if (!jsonData.length) {
        setColumns([]);
        setRows([]);
        return;
      }

      const headers = jsonData[0] ?? [];
      const headerFields = headers.map((h, i) => ({
        field: `col${i}`,
        headerName: h && h.toString().trim() ? h : `Column ${i + 1}`,
        flex: 1,
        editable: true,
        sortable: true,
      }));
      setColumns(headerFields);

      const rowData = jsonData.slice(1).map((row, rowIndex) => {
        const obj = { id: rowIndex + 1 };
        headers.forEach((_, i) => {
          obj[`col${i}`] = row?.[i] ?? "";
        });
        return obj;
      });

      setRows(rowData);
    };
    reader.readAsArrayBuffer(file);
  };

  const processRowUpdate = (newRow) => {
    setRows((prev) => prev.map((r) => (r.id === newRow.id ? newRow : r)));
    return newRow;
  };

  const handleSave = () => {
    alert("âœ… Updates saved!");
  };

  return (
    <div style={{ padding: 20 }}>
      <input
        type="file"
        accept=".xlsx,.xls"
        onChange={handleFileUpload}
        ref={fileInputRef}
        style={{ display: "none" }}
      />

      <Button
        variant="contained"
        color="primary"
        sx={{ mt: 2 }}
        onClick={() => fileInputRef.current?.click()}
      >
        {fileName ? fileName : "Choose File"}
      </Button>

      {rows.length > 0 && (
        <>
          <div style={{ height: 500, width: "100%", marginTop: 20 }}>
            <DataGrid
              rows={rows}
              columns={columns}
              processRowUpdate={processRowUpdate}
              disableRowSelectionOnClick
            />
          </div>

          <Button
            onClick={handleSave}
            variant="contained"
            color="success"
            sx={{ mt: 2 }}
          >
            Save
          </Button>
        </>
      )}
    </div>
  );
};

export default ExcelEditor;
